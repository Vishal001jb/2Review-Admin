using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Login.ModelClass;
using Microsoft.WindowsAzure.MobileServices;
using Microsoft.WindowsAzure.MobileServices.SQLiteStore;
using Microsoft.WindowsAzure.MobileServices.Sync;

namespace Login.Service
{
    public class AzureDataService
    {
        public MobileServiceClient MobileService { get; set; }

        IMobileServiceSyncTable<Question> QuesTable;
        IMobileServiceSyncTable<Designation> DesignationTable;
        IMobileServiceSyncTable<Employee> EmployeeTable;
        IMobileServiceSyncTable<EmployeeCredential> EmployeeCredentialTable;
        IMobileServiceSyncTable<EmployeeDesignation> EmployeeDesignationTable;
        IMobileServiceSyncTable<QuestionDesignation> QuestionDesignationTable;
        IMobileServiceSyncTable<Reviewable> ReviewableTable;
        IMobileServiceSyncTable<Round> RoundTable;
        IMobileServiceSyncTable<Reviewee> RevieweeTable;
        IMobileServiceSyncTable<Employee_Perfomance> Employee_PerfomanceTable;

        public async Task Initialize()
        {
            //Get our sync table that will call out to azure
            MobileService = new MobileServiceClient("https://2review.azurewebsites.net");

            QuesTable = MobileService.GetSyncTable<Question>();
            DesignationTable = MobileService.GetSyncTable<Designation>();
            EmployeeTable = MobileService.GetSyncTable<Employee>();
            EmployeeCredentialTable = MobileService.GetSyncTable<EmployeeCredential>();
            EmployeeDesignationTable = MobileService.GetSyncTable<EmployeeDesignation>();
            QuestionDesignationTable = MobileService.GetSyncTable<QuestionDesignation>();
            ReviewableTable = MobileService.GetSyncTable<Reviewable>();
            RoundTable = MobileService.GetSyncTable<Round>();
            RevieweeTable = MobileService.GetSyncTable<Reviewee>();
            Employee_PerfomanceTable = MobileService.GetSyncTable<Employee_Perfomance>();

            //setup our local sqlite store and intialize our table
            const string path = "2review.db";
            var store = new MobileServiceSQLiteStore(path);
            store.DefineTable<Question>();
            store.DefineTable<Designation>();
            store.DefineTable<Employee>();
            store.DefineTable<EmployeeCredential>();
            store.DefineTable<EmployeeDesignation>();
            store.DefineTable<QuestionDesignation>();
            store.DefineTable<Reviewable>();
            store.DefineTable<Round>();
            store.DefineTable<Reviewee>();
            store.DefineTable<Employee_Perfomance>();

            await MobileService.SyncContext.InitializeAsync(store, new MobileServiceSyncHandler());
        }

        //Reviewable CRUD

        public async Task AddReviewable()
        {
            var review = new Reviewable
            {
                Employee_Id = "7ac79e347b4a4b43aab36178b8dc0c85",
                Designation_Id = "aee32dcd217a4f8794bc33dd02dc0fe7",
                Round_Id = "2018-03-14 09:46:17 Round 1",
                Status = "Pending",
                Total = 10
            };
            await ReviewableTable.InsertAsync(review);
            await Sync();
        }



        //Detail Of Employee

        public async Task<string> AddEmployee(string id, string Fn, string Mn, string Ln, string Gen, string Mno, string Img, string Eid, string Adr, string City, string Pincode, string Country, string State, DateTime Jd)
        {
            var review = new Employee
            {
                EmployeeCredential_Id = id,
                Employee_First_Name = Fn,
                Employee_Middle_Name = Mn,
                Employee_Last_Name = Ln,
                Employee_Gender = Gen,
                Employee_Mobile_No = Mno,
                Employee_Image = Img,
                Employee_Email_Id = Eid,
                Employee_Address = Adr,
                Employee_City = City,
                Employee_Pincode = Pincode,
                Employee_Country = Country,
                Employee_State = State,
                Employee_Joining_Date = Jd
            };

            await EmployeeTable.InsertAsync(review);
            await Sync();
            return review.Id;
        }

        public async Task<List<Employee>> GetEmployee()
        {
            await Sync();
            var result = await EmployeeTable.OrderByDescending(E => E.Employee_First_Name).ToListAsync();

            return result;
        }

        //

        // Employee Credential

        public async Task<string> AddEmployeeCredential(string username, string password)
        {
            var review = new EmployeeCredential
            {
                UserName = username,
                Password = password
            };

            await EmployeeCredentialTable.InsertAsync(review);
            await Sync();
            return review.Id;
        }

        // Check Credential

        public async Task<int> CheckCredential(string un, string pwd)
        {
            await Sync();
            var result = await EmployeeCredentialTable.Where(Ec => Ec.UserName == un && Ec.Password == pwd).ToListAsync();
            return result.Count;
        }

        //Question CRUD

        public async Task<List<Question>> GetQuestion()
        {
            await Sync();
            var result = await QuesTable.OrderByDescending(Q => Q.Question_Text).ToListAsync();
            return result;
        }

        public async Task<bool> DeleteQuestion(Question id)
        {
            await QuesTable.DeleteAsync(id);
            await Sync();
            return true;
        }

        public async Task<string> AddQuestion(string QuestionText)
        {
            var review = new Question
            {
                Question_Text = QuestionText
            };

            await QuesTable.InsertAsync(review);
            await Sync();
            return review.Id;
        }

        //Designation CRUD

        public async Task<List<Designation>> GetDesignation()
        {
            await Sync();
            var result = await DesignationTable.OrderByDescending(D => D.DesignationName).ToListAsync();

            return result;
        }

        public async Task<bool> DeleteDesignation(Designation id)
        {
            await DesignationTable.DeleteAsync(id);
            await Sync();
            return true;
        }

        public async Task<List<data>> Get()
        {
            await Sync();

            var roundTable = await (from rnd in RoundTable
                                    select rnd).ToListAsync();
            var reviewableTable = await (from rnd1 in ReviewableTable
                                         select rnd1).ToListAsync();
            var revieweeTable = await (from rnd2 in RevieweeTable
                                       select rnd2).ToListAsync();

            var common = (from rnd in roundTable
                          join rew in revieweeTable on rnd.Id equals rew.Round_Id
                          join rewb in reviewableTable on rnd.Id equals rewb.Round_Id
                          select new data
                          {
                              rn = rnd.Round_Name,
                              st = rnd.Status,
                              re = rew.Total,
                              reb = rewb.Total,
                              rd = rnd.RoundDate,
                              rt = rnd.RoundTime
                          }).ToList();

            //var common = (from rnd in roundTable
            //              from rew in revieweeTable.Where(rew => rew.Round_Id == rnd.Id).DefaultIfEmpty()
            //              from rewb in reviewableTable.Where(rewb => rewb.Round_Id == rnd.Id).DefaultIfEmpty()
            //              select new data
            //              {
            //                  rn = rnd.Round_Name,
            //                  st = rnd.Status,
            //                  re = rew.Total,
            //                  reb = rewb.Total,
            //                  rd = rnd.RoundDate,
            //                  rt = rnd.RoundTime
            //              }).ToList();

            return common;
        }

        public async Task<List<EmpDesig>> GetEmpDesig()
        {
            await Sync();

            var employeeDesignationTable = await (from ed in EmployeeDesignationTable
                                           select ed).ToListAsync();
            var employeeTable = await (from e in EmployeeTable
                                         select e).ToListAsync();
            var designationTable = await (from d in DesignationTable
                                       select d).ToListAsync();

            var common = (from ed in employeeDesignationTable
                          join e in employeeTable on ed.Employee_Id equals e.Id
                          join d in designationTable on ed.Designation_Id equals d.Id
                          select new EmpDesig
                          {
                              EmpType = e.Employee_First_Name,
                              EmpDesi = d.DesignationName,
                              EmpId = e.Id,
                              EmpDesiId = d.Id
                          }).ToList();
            return common;
        }

            public async Task AddDesignation(string DesignationName)
        {
            var review = new Designation
            {
                DesignationName = DesignationName
            };

            await DesignationTable.InsertAsync(review);
            await Sync();
        }

        //EmployeeDesignation CRUD

        public async Task AddEmployeeDesignation(string EmployeeId, string DesignationId)
        {
            var review = new EmployeeDesignation
            {
                Employee_Id = EmployeeId,
                Designation_Id = DesignationId
            };

            await EmployeeDesignationTable.InsertAsync(review);
            await Sync();
        }

        //QuestionDesignation CRUD

        public async Task AddQuestionDesignation(string QuestionId, string DesignationId)
        {
            var review = new QuestionDesignation
            {
                Question_Id = QuestionId,
                Designation_Id = DesignationId
            };

            await QuestionDesignationTable.InsertAsync(review);
            await Sync();
        }

        //Round CRUD

        public async Task<List<Round>> GetRound()
        {
            await Sync();
            var result = await RoundTable.OrderByDescending(R => R.RoundDate).ToListAsync();

            return result;
        }

        public async Task AddRound(string Round_Name, string Round_Date, string Round_Time)
        {
            var review = new Round
            {
                Round_Name = Round_Name,
                Status = "InProgress",
                RoundDate = Round_Date,
                RoundTime = Round_Time,
                Progress = 50,
                Reviewable = 0,
                Reviewee = 0
            };
            await RoundTable.InsertAsync(review);
            await Sync();
        }

        //Employee PErformance CRUD

        public async Task<List<string>> GetEmpRoundWisePerformance()
        {
            await Sync();
            var result = await Employee_PerfomanceTable.Select(EPT => EPT.Id).ToListAsync();
            return result;
        }
        
        public async Task Sync()
        {
            await QuesTable.PullAsync("allQuestion", QuesTable.CreateQuery());
            await DesignationTable.PullAsync("allDesignation", DesignationTable.CreateQuery());
            await EmployeeTable.PullAsync("AllEmployee", EmployeeTable.CreateQuery());
            await EmployeeCredentialTable.PullAsync("AllEmployeeCredential", EmployeeCredentialTable.CreateQuery());
            await EmployeeDesignationTable.PullAsync("AllEmployeeDesignation", EmployeeDesignationTable.CreateQuery());
            await QuestionDesignationTable.PullAsync("AllQuestionDesignation", QuestionDesignationTable.CreateQuery());
            await ReviewableTable.PullAsync("AllReviewable", ReviewableTable.CreateQuery());
            await RoundTable.PullAsync("AllRound", RoundTable.CreateQuery());
            await RevieweeTable.PullAsync("AllReviewee", RevieweeTable.CreateQuery());
            await Employee_PerfomanceTable.PullAsync("allRoundWiseEmpPerformance", Employee_PerfomanceTable.CreateQuery());
            await MobileService.SyncContext.PushAsync();
        }
    }

    public class data
    {
        public string rn { get; set; }
        public string st { get; set; }
        public int re { get; set; }
        public int reb { get; set; }
        public string rd { get; set; }
        public string rt { get; set; }
    }

    public class EmpDesig
    {
        public string EmpType { get; set; }
        public string EmpDesi { get; set; }
        public string EmpId { get; set; }
        public string EmpDesiId { get; set; }
    }
}